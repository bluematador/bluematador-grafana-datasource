{"version":3,"sources":["../../src/datasource.js"],"names":["BlueMatadorDatasource","instanceSettings","$q","backendSrv","templateSrv","url","accountId","jsonData","apikey","q","withCredentials","headers","basicAuth","length","options","query","doRequest","method","then","response","status","message","title","catch","lastQuery","clone","add","isAfter","lastAnnotations","start","range","from","toISOString","end","to","annotation","limit","annotations","result","data","map","source","event","sourceType","sourceName","details","d","join","closed","Date","toLocaleString","link","name","enabled","enable","datasource","time","text","summary","tags","authToken","datasourceRequest","apiKey"],"mappings":"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","file":"datasource.js","sourcesContent":["import moment from 'moment';\nimport './css/main.css!';\n\nexport class BlueMatadorDatasource {\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.url = 'https://app.bluematador.com/';\n    this.accountId = instanceSettings.jsonData.accountId;\n    this.apikey = instanceSettings.jsonData.apikey;\n\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  query(options) {}\n  metricFindQuery(query) {}\n\n  testDatasource() {\n    return this.doRequest({\n      url: `${this.url}ma/accounts/${this.accountId}/grafana/test`,\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: 'success', message: 'Data source is working', title: 'Success' };\n      }\n    }).catch(err => ({\n      status: 'error',\n      message: 'Unable to connect to data source',\n      title: 'Error',\n    }));\n  }\n\n  annotationQuery(options) {\n    if (this.lastQuery && this.lastQuery.clone().add(1, 'minutes').isAfter(moment())) {\n      return this.lastAnnotations;\n    }\n    this.lastQuery = moment();\n\n    const start = options.range.from.toISOString();\n    const end = options.range.to.toISOString();\n    return this.doRequest({\n      url: `${this.url}ma/accounts/${this.accountId}/grafana/${options.annotation.query}?start=${start}&end=${end}&limit=${options.annotation.limit}`,\n      method: 'GET',\n    }).then(result => {\n      const annotations = result.data.map(event => {\n        const source = `<em>${event.sourceType}: ${event.sourceName}</em>`;\n        const details = event.details.length > 0 ?\n          `<ul class=\"bm-list\">${event.details.map(d => `<li>${d}</li>`).join('')}</ul>` :\n          '';\n        const closed = event.closed ? `Closed: ${(new Date(event.closed)).toLocaleString()}` : '';\n        const link = `<a href=\"${event.link}\" target=\"_blank\">Open in Blue Matador</a>`;\n\n        return {\n          annotation: {\n            name: options.annotation.name,\n            enabled: options.annotation.enable,\n            datasource: options.annotation.datasource,\n          },\n          title: event.title,\n          time: event.time,\n          text: `${source}<br />${closed}<br />${event.summary}${details && ':'}<br />${details}<br />${link}`,\n          tags: event.tags,\n        };\n      });\n\n      this.lastAnnotations = annotations;\n      return annotations;\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n    if (this.authToken) {\n      options.headers['Rocks-Auth'] = this.authToken;\n      return this.backendSrv.datasourceRequest(options).catch(result => {\n        if (result.status == 401 || result.status == 403) {\n          this.authToken = null;\n          return this.doRequest(options);\n        }\n      });\n    } else {\n      return this.backendSrv.datasourceRequest({\n        url: `${this.url}zi/auth/api`,\n        data: {\n          accountId: this.accountId,\n          apiKey: this.apikey,\n        },\n        method: 'POST',\n      }).then(result => {\n        if (result.status == 200) {\n          this.authToken = result.data;\n          return this.doRequest(options);\n        }\n      });\n    }\n  }\n\n}\n"]}